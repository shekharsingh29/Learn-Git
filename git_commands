## Git Commands

1. git --version
2. git help --> Will list out commands in Git

## Git global configuration
3. git config --global user.name "Shekhar Singh"
4. git config --global user.email "kai.shekhar@gmail" 
5. git config --list

These are global configurations. It will be available whenever user pushes to a central 
repository and will be used to track the details of commiters.

## Whenever you want to initialize Git on a working directory
6. git init (Enter this inside the diretory where you want files to be tracked)

7. git status --> Check if any files are untracked in current directory for commiting
8. git add --> This adds the file to staging area.
9. git rm --cached files --> This is to unstage files and bring them back to untracked list
10. git commit -m "your message for this commit" -->  This will move the files from staging area 
        to central repository. Now this will track any changes made to file commited in working area
        with respect to central repository.
11. git commit -am "commit message" --> Combination of git add and git commit. Only when files are 
                modified and are tracked.
12. git diff --> This will tell you differences in file between repository and working area

## git logs and tracking
13. git log --> Will show last 10 commits with alll the detail.
14. git log --author="kai.shekhar@gmail.com"  --> this will search the commit based on authors emailID

## Git commands to manage Github repository (aka Distributed aproach)

15. git clone https://github.com/shekharsingh29/Learn-Git.git
16. git pull 
17. git push
18. git branch --> Will give you list of all branches available and the current branch highlighted
19. git switch branch_name --> For switching to a given branch_name
20. git merge branch_name --> merge the branch_name with the branch you are currently on.  
21. git reset --soft commitID --> This will move the HEAD to the commitID specified and changes are 
                made to come to staging area.
22. git reset --hard coomitID --> Same as above except that it will remove the changes completely.
23. git revert HEAD --> This is mostly for when the code is pushed to the repository. It will
                create a new commit with all changes removed.

24. git diff filename --> will give you difference between file in working area and staging area.
25. git iff commidID1 commitID2 --> Gives difference between the mentioned commit ID's.


26. git branch -a --> To list all the branches.
27. git branch -m branch_name new_branch_name --> to rename a branch
28. git branch -d branch_name --> To delete a branch(you have to be on some other branch and not 
        branch_name you are deleting)


