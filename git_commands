## Git Commands

1. git --version
2. git help --> Will list out commands in Git

## Git global configuration
3. git config --global user.name "Shekhar Singh"
4. git config --global user.email "kai.shekhar@gmail" 
5. git config --list

These are global configurations. It will be available whenever user pushes to a central 
repository and will be used to track the details of commiters.

## Whenever you want to initialize Git on a working directory
6. git init (Enter this inside the diretory where you want files to be tracked)

7. git status --> Check if any files are untracked in current directory for commiting
8. git add --> This adds the file to staging area.
9. git rm --cached files --> This is to unstage files and bring them back to untracked list
10. git commit -m "your message for this commit" -->  This will move the files from staging area 
        to central repository. Now this will track any changes made to file commited in working area
        with respect to central repository.
11. git commit -am "commit message" --> Combination of git add and git commit. Only when files are 
        modified and are tracked.
12. git diff --> This will tell you differences in file between repository and working area

## git logs and tracking
13. git log --> Will show last 10 commits with alll the detail.
14. git log --author="kai.shekhar@gmail.com"  --> this will search the commit based on authors emailID

## Git commands to manage Github repository (aka Distributed aproach)

15. git clone https://github.com/shekharsingh29/Learn-Git.git
16. git pull 
17. git push
18. git branch --> Will give you list of all branches available and the current branch highlighted
19. git switch branch_name --> For switching to a given branch_name
20. git merge branch_name --> merge the branch_name with the branch you are currently on.  
21. git reset --soft commitID --> This will move the HEAD to the commitID specified and changes are 
        made to come to staging area. Instead of we can use file name also if they are in staged area.
22. git reset --hard coomitID --> Same as above except that it will remove the changes completely.
23. git revert HEAD --> This is mostly for when the code is pushed to the repository. It will
        create a new commit with all changes removed.

24. git diff filename --> will give you difference between file in working area and staging area.
25. git diff commidID1 commitID2 --> Gives difference between the mentioned commit ID's.


26. git branch -a --> To list all the branches.
27. git branch -m branch_name new_branch_name --> to rename a branch
28. git branch -d branch_name --> To delete a branch(you have to be on some other branch and not 
        branch_name you are deleting)

## Git Stash
19. git stash --> This will move every change in working directory on a hold and will go to its
        initial state, this will be done only for tracked files.
20. git stash list --> This will list all the stashes done...work to be done later on.
21. git stash apply --> This will move the stash back to the working directory and changes will be 
        visible.
22. git stash drop --> This is needed to be done after stash --apply to remove anything on the stash
        that is already applied.
23. git stash -a --> This will stash both tracked and untracked files.
24. git stash pop --> This is a combination of stash apply and stash drop.
25. git stash save -a "message text" --> Saves the stash with a message
26. git stash show stash@{index} --> Find changes done in specific stash.
27. git stash apply stash@{index} --> To add back specific stash.
28. git stash pop stash@{index} --> pop out specific stash
29. git stash drop stash@{index} --> Drop specific stash.
30. git stash clear --> Will drop everything
31. [shekhar@localhost Learn-Git]$ git remote -v
        origin	https://github.com/shekharsingh29/Learn-Git.git (fetch)
        origin	https://github.com/shekharsingh29/Learn-Git.git (push)
         --> This cmd is used to find out the remote gthub repository this working directory is working on.

32. git commit --amend -m "message to change" --> This is used to change the commit message of the most recent commit.

## Git Reflog

git log --oneline doesn't show orphan commits, the orphan commits can be formed using amend or reset or deletion. 

33. git reflog --oneline --> Will show all the commits including orphan commits.
34. git reflog HEAD@{20} --> It will show commits from index 20 and above..21, 22, 23.... (Most recent comment gets 
        the least index i.e 0. It's like LIFO in queues).
35. git checkout HEAD@{index} --> Thihs will start pointing HEAD to the given index, even though if that index belongs
        to orphan commit.
36. git reflog HEAD@{6.hours.ago} --> this will show commits prior to last 6 hours.
37. git diff HEAD@{6} HEAD@{10} --> Thihs will compare commits from index number 6 to 10.
38. git reflog HEAD@{2021-07-12} --> This will show commits on and before 12th July 2021
39. git reflog main@{5} --> Same like HEAD this will show main branches state from position number 5 and below
        ..same can be done for other branches like git reflog feature_branch@{5}
40. git reflog expire --expire-unreachable=now --all --> This is used to remove all the orphan commits.
41. git gc --prune=now --> This will clean them up from system.

## Squash and Merge





## Cleaning up your directory.
git clean -d -x -i --> This will clear out any untacked files in an interactive mode.


## Git Rebase

Use this link to learn git rebase and practice --> https://onlywei.github.io/explain-git-with-d3/

Go to the feature branch feature_1 and Enter
>> git rebase main
This will add all the changes of feature1  on top of main and then switch to branch main.
>> git merge feature_1
>> git branch -d feature_1

Suppose there are 2 more brances apart from main -featire_1 and feature_2. feature_2 rebases with main
and all the necessary steps are performed post that. Then we try to rebase feature_1 with main and we get a conflict..
after we resolve the conflict it is recommended to do..
>> git rebase --continue
This will pick up from where it left.

## Cherry picking.

Cherry picking as the name suggests cherry picks a specific commit ID and creates a new commit. Scenario:
there are few commits in branch feature_1 and one of the commits is abc123. Branch feature_2 wants this commit
abc123 ...
>> git switch feature_2
>> git cherry-pick abc123
You can remove feature_1 branch and perform cleanup activity.

>> git cherry-pick --continue --> After resolving merge conflicts while cherry picking.
>> git cherry-pick --abort --> Abort cherry picking.


## Git tag

git tag --> Will list out all the available tags in the current repository.
git checkout tagname --> This will point the HEAD to tagname(commit where the tag was created)
git tag tag_name --> Light weight tag.
git tag -a tag_name -m "message with the tag" --> Same as light weight tag with some aditional features of 
        logging extra details with the tag.
git show tag_name --> This will how details about the tag
git tag -d tag_name --> To delete a specific tag.
git tag -a tag_name -m "message with the tag" commit-ID --> To tag a specific commit ID.
git push --tag --> To push tags to central repository.
git push origin :tag_name --> To delete a tag from remote repository






